const {
  time,
  loadFixture,
} = require("@nomicfoundation/hardhat-network-helpers");
const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");

describe("Staking", function () {
  // We define a fixture to reuse the same setup in every test.
  // We use loadFixture to run this setup once, snapshot that state,
  // and reset Hardhat Network to that snapshot in every test.
  async function requirementFixture() {
   
   
    const [owner, otherAccount] = await ethers.getSigners();

    const token = await ethers.getContractFactory("MyToken");
    const myToken = await token.deploy();
    await myToken.deployed();

    const s = await ethers.getContractFactory("stake");
    const stake = await s.deploy();
    await stake.deployed();

    await myToken.mint(owner.address,"1000000000000000000000");
    return {myToken,stake,owner};
  }

  describe("stakeTokens", function () {
    it("Should transfer the amount to the stake contract", async function () {

      const {myToken,stake} = await loadFixture(requirementFixture);

      await myToken.approve(stake.address,"1000000000000000000000");
      await stake.stakeTokens(myToken.address,"500000000000000000000");
      const stak = await stake.stakeTokens(myToken.address,"500000000000000000000")
      expect(await myToken.balanceOf(stake.address)).to.equal("1000000000000000000000");
      const stakWait = await stak.wait();
      const stakeId = stakWait.events[2].args[0];
      expect(stakeId).to.equal("1");
    });

    it("should store write data",async function (){
      const {myToken,stake,owner} = await loadFixture(requirementFixture);
      await myToken.approve(stake.address,"1000000000000000000000");
      await stake.stakeTokens(myToken.address,"1000000000000000000000");
      const stakeTime = await time.latest();

      const data = await stake.stakes(0);
      expect(data[0]).to.equal(owner.address);
      expect(data[1]).to.equal(myToken.address);
      expect(data[2]).to.equal(stakeTime);
      expect(data[3]).to.equal("1000000000000000000000");
      expect(data[4]).to.equal("0");
    });

    // it("Should set the right owner", async function () {
    //   const { lock, owner } = await loadFixture(deployOneYearLockFixture);

    //   expect(await lock.owner()).to.equal(owner.address);
    // });

    // it("Should receive and store the funds to lock", async function () {
    //   const { lock, lockedAmount } = await loadFixture(
    //     deployOneYearLockFixture
    //   );

    //   expect(await ethers.provider.getBalance(lock.address)).to.equal(
    //     lockedAmount
    //   );
    // });

    // it("Should fail if the unlockTime is not in the future", async function () {
    //   // We don't use the fixture here because we want a different deployment
    //   const latestTime = await time.latest();
    //   const Lock = await ethers.getContractFactory("Lock");
    //   await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(
    //     "Unlock time should be in the future"
    //   );
    // });
  });

  describe("ustakeTokens",function(){
    it("should return right reward afer 1 year ",async function(){
      const {myToken,stake,owner} = await loadFixture(requirementFixture);
      await myToken.approve(stake.address,"1000000000000000000000");
      await stake.stakeTokens(myToken.address,"1000000000000000000000");
      const tweleveMonth = (await time.latest())+ 365 * 24 * 60 * 60;
  
      await time.increaseTo(tweleveMonth);
      await stake.unstakeTokens(0);
      const data = await stake.stakes(0);
      expect(data[4]).to.equal("150000000000000000000");

    });

    it("should return right reward afer 6 month",async function(){
      const {myToken,stake,owner} = await loadFixture(requirementFixture);
      await myToken.approve(stake.address,"1000000000000000000000");
      await stake.stakeTokens(myToken.address,"1000000000000000000000");
      const sixMonth = (await time.latest())+ 182 * 24 * 60 * 60;
  
      await time.increaseTo(sixMonth);
      await stake.unstakeTokens(0);
      const data = await stake.stakes(0);
      expect(data[4]).to.equal("100000000000000000000");
    });

    it("should return right reward afer 1 month",async function(){
      const {myToken,stake,owner} = await loadFixture(requirementFixture);
      await myToken.approve(stake.address,"1000000000000000000000");
      await stake.stakeTokens(myToken.address,"1000000000000000000000");
      const sixMonth = (await time.latest())+ 30 * 24 * 60 * 60;
  
      await time.increaseTo(sixMonth);
      await stake.unstakeTokens(0);
      const data = await stake.stakes(0);
      expect(data[4]).to.equal("50000000000000000000");
    });
  });
  //   describe("Validations", function () {
  //     it("Should revert with the right error if called too soon", async function () {
  //       const { lock } = await loadFixture(deployOneYearLockFixture);

  //       await expect(lock.withdraw()).to.be.revertedWith(
  //         "You can't withdraw yet"
  //       );
  //     });

  //     it("Should revert with the right error if called from another account", async function () {
  //       const { lock, unlockTime, otherAccount } = await loadFixture(
  //         deployOneYearLockFixture
  //       );

  //       // We can increase the time in Hardhat Network
  //       await time.increaseTo(unlockTime);

  //       // We use lock.connect() to send a transaction from another account
  //       await expect(lock.connect(otherAccount).withdraw()).to.be.revertedWith(
  //         "You aren't the owner"
  //       );
  //     });

  //     it("Shouldn't fail if the unlockTime has arrived and the owner calls it", async function () {
  //       const { lock, unlockTime } = await loadFixture(
  //         deployOneYearLockFixture
  //       );

  //       // Transactions are sent using the first signer by default
  //       await time.increaseTo(unlockTime);

  //       await expect(lock.withdraw()).not.to.be.reverted;
  //     });
  //   });

  //   describe("Events", function () {
  //     it("Should emit an event on withdrawals", async function () {
  //       const { lock, unlockTime, lockedAmount } = await loadFixture(
  //         deployOneYearLockFixture
  //       );

  //       await time.increaseTo(unlockTime);

  //       await expect(lock.withdraw())
  //         .to.emit(lock, "Withdrawal")
  //         .withArgs(lockedAmount, anyValue); // We accept any value as `when` arg
  //     });
  //   });

  //   describe("Transfers", function () {
  //     it("Should transfer the funds to the owner", async function () {
  //       const { lock, unlockTime, lockedAmount, owner } = await loadFixture(
  //         deployOneYearLockFixture
  //       );

  //       await time.increaseTo(unlockTime);

  //       await expect(lock.withdraw()).to.changeEtherBalances(
  //         [owner, lock],
  //         [lockedAmount, -lockedAmount]
  //       );
  //     });
  //   });
  // });
});
